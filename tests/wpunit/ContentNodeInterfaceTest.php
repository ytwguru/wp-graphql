<?php

class ContentNodeInterfaceTest extends \Codeception\TestCase\WPTestCase {

	public $admin;

	public function setUp() {
		$this->admin = $this->factory()->user->create( [
			'role' => 'administrator',
		] );
		wp_set_current_user( $this->admin );
		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );
		parent::setUp(); // TODO: Change the autogenerated stub
	}

	public function tearDown() {
		parent::tearDown(); // TODO: Change the autogenerated stub
		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );
		WPGraphQL::__clear_schema();
	}

	/**
	 * @param string $structure
	 */
	public function set_permalink_structure( $structure = '' ) {
		global $wp_rewrite;
		$wp_rewrite->init();
		$wp_rewrite->set_permalink_structure( $structure );
		$wp_rewrite->flush_rules();
	}

	/**
	 * @throws Exception
	 */
	public function testContentNodeExists() {
		$query  = '
		{
		  __type(name: "ContentNode") {
		    name
		    kind
		  }
		}
		';
		$actual = graphql( [ 'query' => $query ] );
		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertEquals( 'ContentNode', $actual['data']['__type']['name'] );
		$this->assertEquals( 'INTERFACE', $actual['data']['__type']['kind'] );
	}

	/**
	 * @throws Exception
	 */
	public function testQueryContentNodesOfManyTypes() {

		$page_id = $this->factory()->post->create( [
			'post_type'   => 'page',
			'post_status' => 'publish',
			'post_title'  => 'Test Page',
			'post_author' => $this->admin,
		] );

		$post_id = $this->factory()->post->create( [
			'post_type'   => 'post',
			'post_status' => 'publish',
			'post_title'  => 'Test Post',
			'post_author' => $this->admin,
		] );

		$query = '
		{
		  contentNodes(first:2) {
		    nodes {
		      __typename
		      id
		      databaseId
		      ...on NodeWithTitle {
		        title
		      }
		      ...on Post {
		        postId
		      }
		      ...on Page {
		        pageId
		      }
		    }
		  }
	    }
		';

		$actual = graphql( [
			'query' => $query
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );

		$this->assertEquals( 'Post', $actual['data']['contentNodes']['nodes'][0]['__typename'] );
		$this->assertEquals( $post_id, $actual['data']['contentNodes']['nodes'][0]['databaseId'] );
		$this->assertEquals( $post_id, $actual['data']['contentNodes']['nodes'][0]['postId'] );

		$this->assertEquals( 'Page', $actual['data']['contentNodes']['nodes'][1]['__typename'] );
		$this->assertEquals( $page_id, $actual['data']['contentNodes']['nodes'][1]['databaseId'] );
		$this->assertEquals( $page_id, $actual['data']['contentNodes']['nodes'][1]['pageId'] );
	}

	/**
	 * @return string
	 */
	public function contentNodeQuery() {
		return '
		query TestContentNode( $postId: ID! $pageId: ID! $postIdType: ContentNodeIdTypeEnum $pageIdType: ContentNodeIdTypeEnum ){
		  post: contentNode(id: $postId, idType: $postIdType, contentType: POST) {
		    ...ContentFields
		  }
		  page: contentNode(id: $pageId, idType: $pageIdType, contentType: PAGE) {
		    ...ContentFields
		  }
		}
		
		fragment ContentFields on ContentNode {
		  __typename
		  id
		  ...on NodeWithTitle {
	        title
	      }
		  slug
		  uri
		  ... on Post {
		    postId
		  }
		  ... on Page {
		    pageId
		  }
		}
		';
	}

	/**
	 * @throws Exception
	 */
	public function testContentNodeFieldByDatabaseId() {

		$page_id = $this->factory()->post->create( [
			'post_type'   => 'page',
			'post_status' => 'publish',
			'post_title'  => 'Test Page',
			'post_author' => $this->admin,
		] );

		$post_id = $this->factory()->post->create( [
			'post_type'   => 'post',
			'post_status' => 'publish',
			'post_title'  => 'Test Post',
			'post_author' => $this->admin,
		] );

		/**
		 * Test when IDs are cast as strings
		 */
		$actual = graphql( [
			'query'     => $this->contentNodeQuery(),
			'variables' => [
				'postIdType' => 'DATABASE_ID',
				'postId'     => (string) $post_id,
				'pageIdType' => 'DATABASE_ID',
				'pageId'     => (string) $page_id,
			]
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertEquals( 'Post', $actual['data']['post']['__typename'] );
		$this->assertEquals( 'Page', $actual['data']['page']['__typename'] );
		$this->assertEquals( $post_id, $actual['data']['post']['postId'] );
		$this->assertEquals( $page_id, $actual['data']['page']['pageId'] );

		/**
		 * Test when IDs are cast as integers
		 */
		$actual = graphql( [
			'query'     => $this->contentNodeQuery(),
			'variables' => [
				'postIdType' => 'DATABASE_ID',
				'postId'     => (int) $post_id,
				'pageIdType' => 'DATABASE_ID',
				'pageId'     => (int) $page_id,
			]
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertEquals( 'Post', $actual['data']['post']['__typename'] );
		$this->assertEquals( 'Page', $actual['data']['page']['__typename'] );
		$this->assertEquals( $post_id, $actual['data']['post']['postId'] );
		$this->assertEquals( $page_id, $actual['data']['page']['pageId'] );
	}

	/**
	 * @throws Exception
	 */
	public function testContentNodeFieldByUri() {

		$this->set_permalink_structure( '' );

		$page_id = $this->factory()->post->create( [
			'post_type'   => 'page',
			'post_status' => 'publish',
			'post_title'  => 'Test Page',
			'post_author' => $this->admin
		] );

		$post_id = $this->factory()->post->create( [
			'post_type'   => 'post',
			'post_status' => 'publish',
			'post_title'  => 'Test Post',
			'post_author' => $this->admin
		] );

		$variables = [
			'postIdType' => 'URI',
			'postId'     => '/?' . parse_url( get_permalink( $post_id ) )['query'],
			'pageIdType' => 'URI',
			'pageId'     => '/?' . parse_url( get_permalink( $page_id ) )['query'],
		];

		codecept_debug( $variables );

		$actual = graphql( [
			'query'     => $this->contentNodeQuery(),
			'variables' => $variables
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertEquals( 'Post', $actual['data']['post']['__typename'] );
		$this->assertEquals( 'Page', $actual['data']['page']['__typename'] );
		$this->assertEquals( $post_id, $actual['data']['post']['postId'] );
		$this->assertEquals( $page_id, $actual['data']['page']['pageId'] );

		$this->set_permalink_structure( '/%year%/%monthnum%/%day%/%postname%/' );

		$variables = [
			'postIdType' => 'URI',
			'postId'     => ltrim( parse_url( get_permalink( $post_id ) )['path'], '/' ),
			'pageIdType' => 'URI',
			'pageId'     => ltrim( parse_url( get_permalink( $page_id ) )['path'], '/' ),
		];

		codecept_debug( $variables );


		$actual = graphql( [
			'query'     => $this->contentNodeQuery(),
			'variables' => $variables
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertEquals( 'Post', $actual['data']['post']['__typename'] );
		$this->assertEquals( 'Page', $actual['data']['page']['__typename'] );
		$this->assertEquals( $post_id, $actual['data']['post']['postId'] );
		$this->assertEquals( $page_id, $actual['data']['page']['pageId'] );
	}

	/**
	 * @throws Exception
	 */
	public function testContentNodeFieldById() {

		$page_id = $this->factory()->post->create( [
			'post_type'   => 'page',
			'post_status' => 'publish',
			'post_title'  => 'Test Page',
			'post_author' => $this->admin
		] );

		$post_id = $this->factory()->post->create( [
			'post_type'   => 'post',
			'post_status' => 'publish',
			'post_title'  => 'Test Post',
			'post_author' => $this->admin
		] );

		$variables = [
			'postIdType' => 'ID',
			'postId'     => \GraphQLRelay\Relay::toGlobalId( 'post', $post_id ),
			'pageIdType' => 'ID',
			'pageId'     => \GraphQLRelay\Relay::toGlobalId( 'page', $page_id ),
		];

		codecept_debug( $variables );

		$actual = graphql( [
			'query'     => $this->contentNodeQuery(),
			'variables' => $variables
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertEquals( 'Post', $actual['data']['post']['__typename'] );
		$this->assertEquals( 'Page', $actual['data']['page']['__typename'] );
		$this->assertEquals( $post_id, $actual['data']['post']['postId'] );
		$this->assertEquals( $page_id, $actual['data']['page']['pageId'] );
	}

	/**
	 * @throws Exception
	 */
	public function testContentNodeFieldByQueryArgUri() {

		$page_id = $this->factory()->post->create( [
			'post_type'   => 'page',
			'post_status' => 'publish',
			'post_title'  => 'Test Page',
			'post_author' => $this->admin
		] );

		$post_id = $this->factory()->post->create( [
			'post_type'   => 'post',
			'post_status' => 'publish',
			'post_title'  => 'Test Post',
			'post_author' => $this->admin
		] );

		$variables = [
			'postIdType' => 'ID',
			'postId'     => \GraphQLRelay\Relay::toGlobalId( 'post', $post_id ),
			'pageIdType' => 'ID',
			'pageId'     => \GraphQLRelay\Relay::toGlobalId( 'page', $page_id ),
		];

		codecept_debug( $variables );

		$actual = graphql( [
			'query'     => $this->contentNodeQuery(),
			'variables' => $variables
		] );

		codecept_debug( $actual );

		$this->assertArrayNotHasKey( 'errors', $actual );
		$this->assertEquals( 'Post', $actual['data']['post']['__typename'] );
		$this->assertEquals( 'Page', $actual['data']['page']['__typename'] );
		$this->assertEquals( $post_id, $actual['data']['post']['postId'] );
		$this->assertEquals( $page_id, $actual['data']['page']['pageId'] );
	}


}
